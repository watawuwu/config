#!/bin/bash

# common config
#============================================================================================

# unlimited flow control
stty -ixon

# for tmux?
function share_history() {
  # add prev command .bash_history
  history -a
  # clear history
  history -c
  # reload history
  history -r
}

PROMPT_COMMAND='share_history'

if [ `uname` = "Darwin" ]; then
  # for osx
  #============================================================================================
  PS1='\[\033[32m\]\u@\h\[\033[00m\]:\[\033[34m\]\W\[\033[31m\]$(__git_ps1)\[\033[00m\]\$ '

elif [ `uname` = "Linux" ]; then
  # for ubuntu
  #============================================================================================

  if [ "$DISPLAY" != "" ]; then
    # unabled ime for emacs
    xrdb ${HOME}/.Xresources

    # Set repeat keys
    xset r rate 150 50
    xset r rate 150 50
  fi
fi

# enviroment
#============================================================================================

# language
export LC_ALL='ja_JP.UTF-8'

# delete duplicated command
export HISTCONTROL=erasedups

# ignore history
export HISTIGNORE=?:??:exit

# python
export PYTHONPATH=/usr/local/lib/python2.7/site-packages/

# emacs
export SVN_EDITOR='/usr/local/bin/emacsclient'
export EDITOR='/usr/local/bin/emacsclient'
export VISUAL='/usr/local/bin/emacsclient'

# ruby
if [ `which rbenv` ]
then
  eval "$(rbenv init -)"
fi

# phpenv
if [ `which phpenv` ]
then
  export PATH=${HOME}/.phpenv/bin:$PATH
  eval "$(phpenv init -)"
fi

# android

export ANDROID_HOME=${HOME}/opt/adt-bundle/sdk
export PATH=${PATH}:${ANDROID_HOME}/platform-tools
export PATH=${PATH}:${ANDROID_HOME}/tools



# scala
export SCALA_HOME="/opt/scala"
export PATH=$PATH:$SCALA_HOME/bin

# sbt
export SBT_HOME="/opt/sbt"
export PATH=$PATH:$SBT_HOME/bin

# play
export PLAY_HOME=${HOME}"/opt/play"
export PATH=$PATH:$PLAY_HOME

# pvtivator
export ACTIVATOR_HOME=${HOME}"/opt/activator"
export PATH=$PATH:$ACTIVATOR_HOME

# gradle
export GRADLE_HOME=${HOME}"/opt/gradle"
export PATH=$PATH:$GRADLE_HOME/bin

# sns-cli
export AWS_SNS_HOME=${HOME}"/opt/SimpleNotificationServiceCli"
export PATH=$PATH:$AWS_SNS_HOME/bin

# nodebrew
export NODEBREW_ROOT=$HOME/.nodebrew
export PATH=$PATH:${HOME}/.nodebrew/current/bin

# Dstat
export DSTAT_MYSQL_USER=root
export DSTAT_MYSQL_PWD=password
export DSTAT_MYSQL_HOST='127.0.0.1'
export DSTAT_MYSQL='-uroot -ppass -h127.0.0.1'

# Nim
export NIM_HOME=${HOME}"/repo/Nim"
export NIMBLE_HOME=${HOME}"/.nimble"
export PATH=$PATH:$NIM_HOME/bin:$NIMBLE_HOME/bin


# workâ€¦
export DEV_ENV='tokyo'

if [ `uname` = "Darwin" ]; then
  # for osx
  export JAVA_HOME=`/usr/libexec/java_home`

  # package config
  export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig

elif [ `uname` = "Linux" ]; then
  # for ubuntu
  export JAVA_HOME=/usr/lib/jvm/java-7-oracle/

fi

# git
#============================================================================================

# git prompt
if [ -f ${HOME}/.git-completion.bash ]; then
  source ${HOME}/.git-completion.bash
fi

if [ -f ${HOME}/.git-prompt.sh ]; then
  source ${HOME}/.git-prompt.sh
fi



# functions
#============================================================================================

# utc utils
function utc2date() {
  date --date "@${1}" +"%Y-%m-%d %H:%M:%S"
  date -u --date "@${1}" +"%Y-%m-%d %H:%M:%S UTC"
}

function date2utc() {
  date -j "%Y/%m/%d %H:%M:%S" "$1" +%s
}

function peco-history() {
  local NUM=$(history | wc -l)
  local FIRST=$((-1*(NUM-1)))

  if [ $FIRST -eq 0 ] ; then
    # Remove the last entry, "peco-history"
    history -d $((HISTCMD-1))
    echo "No history" >&2
    return
  fi

  local CMD=$(fc -l $FIRST | sort -k 2 -k 1nr | uniq -f 1 | sort -nr | sed -E 's/^[0-9]+[[:blank:]]+//' | peco | head -n 1)

  if [ -n "$CMD" ] ; then
    # Replace the last entry, "peco-history", with $CMD
    history -s $CMD

    if type osascript > /dev/null 2>&1 ; then
      # Send UP keystroke to console
      (osascript -e 'tell application "System Events" to keystroke (ASCII character 30)' &)
    fi

    # Uncomment below to execute it here directly
    # echo $CMD >&2
    # eval $CMD
  else
    # Remove the last entry, "peco-history"
    history -d $((HISTCMD-1))
  fi
}

function pcd() {
  local DIR_NAME="$1"

  if [ -z "$DIR_NAME" ] ; then
    echo "Usage: pcd <DIR_NAME>" >&2
    return 1
  fi

  #local DIR=$(mdfind -onlyin ~ -name ${DIR_NAME} | peco | head -n 1)
  local DIR=$(mdfind -onlyin ~ "kind:folder ${DIR_NAME}" | peco | head -n 1)

  if [ -d "$DIR" ] ; then
    pushd "$DIR"
  fi
}

# bind
#============================================================================================

if [ `which peco` != "" ]; then
  bind -x '"\C-r": peco-history'
fi
